
import protocol_label
import compile_proto

class lua_protocal:
    name = ''
    module_name = ''
    gname = ''
    desc = ''
    prefix = ''
    protocal_id = 0
    fields = None
    def __str__(self):
        return self.prefix, self.name

def do_export(context):
    project = context.project
    
    file_lua_path = context.output_path + 'protocols.lua'
    file_lua = open(file_lua_path,'w')

    file_lua.write('-- Generated By Protocal Editor Do not Edit !!!!!!!!!!!!\n')
    file_lua.write('Protocols = {}\n')
    
    protocols_dict = {}
    for module in project.modules:
        protocols = module.protocols
        for protocol in protocols:
            prefix = "Protocols"
            gname = protocol.name
            if protocols_dict.has_key(gname):
                oProto = protocols_dict.pop(gname)
                oProto_gname = oProto.gname + '_' + oProto.module_name
                oProto.gname = oProto_gname
                protocols_dict[oProto_gname] = oProto
                gname = gname + '_' + module.name

            proto = lua_protocal()
            proto.id = protocol.id
            proto.name = protocol.name
            proto.gname = gname
            proto.module_name = module.name
            proto.desc = project.get_comment(protocol.location)
            proto.fields = protocol.fields
            proto.prefix = prefix
            protocols_dict[gname] = proto

    sortedItems = sorted(protocols_dict.items(), lambda x,y: cmp(x[1].id,y[1].id))
    for gname, proto in sortedItems:
        file_lua.write('%s.%s = %d;\n'%(proto.prefix,proto.gname,proto.id))
    file_lua.write("\n")

    file_lua.write('ProtocolConfigs = {\n')

    file_lua.write('    modules = {\n')
    for module in project.modules:
        pb_data,pb_len = compile_proto.load_compile_proto(context, module.name)
        file_lua.write('        ["%s"] = { namespace = "%s", data = "%s", len = %d },\n'%(module.name, module.namespace, pb_data, pb_len))
    file_lua.write('    },\n')   
    
    file_lua.write('    protocols = {\n')
    for module in project.modules:
        protocols = module.protocols
        protocols = sorted(protocols, cmp = lambda x,y: cmp(x.id,y.id))
        for protocol in protocols:
            pb_name = protocol.name
            pb_fullname = protocol.fullname
            module_name = module.name
            file_lua.write('        [%d] = { id = %d, module = "%s", name = "%s", type = %s, ref = %s, full_name = "%s"},\n'%( \
                        int(protocol.id),int(protocol.id),module_name,pb_name,'1','nil',pb_fullname))

    file_lua.write('    },\n')   
    
    file_lua.write('}\n')   
    file_lua.write('\n')  


    for gname, proto in sortedItems:
        file_lua.write('-- @desc  ')
        file_lua.write(proto.desc.encode('utf-8'))
        file_lua.write('\n')
        fields = proto.fields
        for field in fields:
            file_lua.write('-- @field %-60s %-20s %-10s @'%(field.proto_type.name, field.name, protocol_label.get_label_type_name(field.label)))
            file_lua.write(project.get_comment(field.location).encode('utf-8'))
            file_lua.write('\n')
        file_lua.write('function %s.as%s(msg)\n'%(proto.prefix, proto.gname))
        file_lua.write('    return msg or { id = %s.%s }\n'%(proto.prefix, proto.gname))
        file_lua.write('end\n\n')
    
    # file_lua.write('local function luaList(items,func)\n')
    # file_lua.write('    local newItems = {};\n')
    # file_lua.write('    if func then\n')
    # file_lua.write('        for key,item in pairs(items) do\n')
    # file_lua.write('            item = func(item);\n')
    # file_lua.write('        end\n')
    # file_lua.write('    else\n')
    # file_lua.write('        for key,item in pairs(items) do\n')
    # file_lua.write('            item = item;\n')
    # file_lua.write('        end\n')
    # file_lua.write('    end\n')
    # file_lua.write('    return newItems;\n')
    # file_lua.write('end\n')

    # for module in project.modules:
    #     for message in module.messages:
    #         prefix = "Protocols"
    #         file_lua.write('-- @desc  ')
    #         file_lua.write(project.get_comment(protocol.location).encode('utf-8'))
    #         file_lua.write('\n')
    #         file_lua.write('function %s.unfold%s(msg)\n'%(prefix, protocol.name))
    #         file_lua.write('    if not msg then return nil end\n')

    #         fields = protocol.fields
    #         for field in message.fields:
    #             segment_type_name = field.proto_type.name
    #             names = segment_type_name.split('.')
    #             segment_type_name = names[len(names)-1]

    #             if field.proto_type.is_basic:
    #                 if field.label == protocol_label.LabelType.LABEL_REPEATED:
    #                     file_lua.write('    msg.%s = luaList(msg.%s)'%(field.name,field.name))
    #                 else:
    #                     file_lua.write('    msg.%s = msg.%s'%(field.name, field.name))
    #                 file_lua.write('    -- @')
    #                 file_lua.write(project.get_comment(field.location).encode('utf-8'))
    #                 file_lua.write('\n')
    #             else:
    #                 if field.label == protocol_label.LabelType.LABEL_REPEATED:
    #                     file_lua.write('    msg.%s = luaList(msg.%s, %s.unfold%s)'%(field.name,field.name,prefix,segment_type_name))
    #                 else:
    #                     file_lua.write('    msg.%s = %s.unfold%s(msg.%s)'%(field.name,prefix,segment_type_name,field.name))
    #                 file_lua.write('    -- @')
    #                 file_lua.write(project.get_comment(field.location).encode('utf-8'))
    #                 file_lua.write('\n')

    #         file_lua.write('    return msg\n')
    #         file_lua.write('end\n\n')


    #     for protocol in module.protocols:
    #         prefix = "Protocols"

    #         file_lua.write('-- @desc  ')
    #         file_lua.write(project.get_comment(protocol.location).encode('utf-8'))
    #         file_lua.write('\n')
    #         file_lua.write('function %s.unfold%s(msg)\n'%(prefix, protocol.name))
    #         file_lua.write('    if not msg then return nil end\n')

    #         fields = protocol.fields
    #         for field in fields:
    #             segment_type_name = field.proto_type.name
    #             names = segment_type_name.split('.')
    #             segment_type_name = names[len(names)-1]

    #             if field.proto_type.is_basic:
    #                 if field.label == protocol_label.LabelType.LABEL_REPEATED:
    #                     file_lua.write('    msg.%s = luaList(msg.%s)'%(field.name,field.name))
    #                 else:
    #                     file_lua.write('    msg.%s = msg.%s'%(field.name, field.name))
    #                 file_lua.write('    -- @')
    #                 file_lua.write(project.get_comment(field.location).encode('utf-8'))
    #                 file_lua.write('\n')
    #             else:
    #                 if field.label == protocol_label.LabelType.LABEL_REPEATED:
    #                     file_lua.write('    msg.%s = luaList(msg.%s, %s.unfold%s)'%(field.name,field.name,prefix,segment_type_name))
    #                 else:
    #                     file_lua.write('    msg.%s = %s.unfold%s(msg.%s)'%(field.name,prefix,segment_type_name,field.name))
    #                 file_lua.write('    -- @')
    #                 file_lua.write(project.get_comment(field.location).encode('utf-8'))
    #                 file_lua.write('\n')

    #         file_lua.write('    return msg\n')
    #         file_lua.write('end\n\n')